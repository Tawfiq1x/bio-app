datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String?
  name           String?
  username       String         @unique
  image          String?
  emailVerified  DateTime?
  isAdmin        Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  profile        Profile?
  userBadges     UserBadge[]
  visits         Visit[]
  linkClicks     LinkClick[]
  settings       UserSettings?
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  bio         String?
  avatar      String?
  banner      String?
  music       String?
  socialLinks Json?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id         String      @id @default(uuid())
  name       String
  icon       String       // e.g., /badges/global/star.png
  isGlobal   Boolean      @default(false)
  createdAt  DateTime     @default(now())

  userBadges UserBadge[]
}

model UserBadge {
  id         String   @id @default(uuid())
  userId     String
  badgeId    String
  assignedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Visit {
  id         String   @id @default(uuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  visitedAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LinkClick {
  id         String   @id @default(uuid())
  userId     String
  platform   String?   // e.g., "twitter", "github"
  ipAddress  String?
  userAgent  String?
  clickedAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id             String   @id @default(uuid())
  userId         String   @unique
  darkMode       Boolean  @default(false)
  isPublic       Boolean  @default(true)
  notifyOnVisit  Boolean  @default(true)

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
